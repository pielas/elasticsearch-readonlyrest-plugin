Index: es79x/src/main/scala/tech/beshu/ror/es/request/handler/regular/RegularRequestHandler.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- es79x/src/main/scala/tech/beshu/ror/es/request/handler/regular/RegularRequestHandler.scala	(revision 9d51d4850901723533eabbf8c7713536acbf7362)
+++ es79x/src/main/scala/tech/beshu/ror/es/request/handler/regular/RegularRequestHandler.scala	(date 1606412528762)
@@ -144,8 +144,8 @@
     }
   }
 
-  private def configureResponseTransformations(responseTransformations: List[ResponseTransformation]): Unit = {
-    responseTransformations.collect {
+  private def configureResponseTransformations(responseTransformations: List[ResponseTransformation]) = {
+    responseTransformations.map {
       case FilteredResponseFields(responseFieldsRestrictions) =>
         esContext.channel.setResponseFieldRestrictions(responseFieldsRestrictions)
     }
Index: es79x/src/main/scala/tech/beshu/ror/es/ResponseFieldsFiltering.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- es79x/src/main/scala/tech/beshu/ror/es/ResponseFieldsFiltering.scala	(revision 9d51d4850901723533eabbf8c7713536acbf7362)
+++ es79x/src/main/scala/tech/beshu/ror/es/ResponseFieldsFiltering.scala	(date 1606412333813)
@@ -1,5 +1,6 @@
 package tech.beshu.ror.es
 
+import org.apache.logging.log4j.scala.Logging
 import org.elasticsearch.common.xcontent.cbor.CborXContent
 import org.elasticsearch.common.xcontent.json.JsonXContent
 import org.elasticsearch.common.xcontent.smile.SmileXContent
@@ -11,23 +12,26 @@
 import scala.collection.JavaConverters._
 
 trait ResponseFieldsFiltering {
+  this: Logging =>
 
-  private var responseFieldsRestrictions: Option[ResponseFieldsRestrictions] = None
+  @volatile private var responseFieldsRestrictions: Option[ResponseFieldsRestrictions] = None
 
   def setResponseFieldRestrictions(responseFieldsRestrictions: ResponseFieldsRestrictions): Unit = {
     this.responseFieldsRestrictions = Some(responseFieldsRestrictions)
   }
 
   protected def filterRestResponse(response: RestResponse): RestResponse = {
-    response match {
-      case bytesRestResponse: BytesRestResponse =>
-        responseFieldsRestrictions match {
-          case Some(fieldsRestrictions) =>
+    responseFieldsRestrictions match {
+      case Some(fieldsRestrictions) =>
+        response match {
+          case bytesRestResponse: BytesRestResponse =>
             filterBytesRestResponse(bytesRestResponse, fieldsRestrictions)
-          case None =>
-            bytesRestResponse
-        }
-      case otherResponse => otherResponse
+          case otherResponse =>
+            logger.warn("ResponseFields filtering is unavailable for this type of request")
+            otherResponse
+        }
+      case None =>
+        response
     }
   }
 
Index: es79x/src/main/scala/tech/beshu/ror/es/RorRestChannel.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- es79x/src/main/scala/tech/beshu/ror/es/RorRestChannel.scala	(revision 9d51d4850901723533eabbf8c7713536acbf7362)
+++ es79x/src/main/scala/tech/beshu/ror/es/RorRestChannel.scala	(date 1606412456546)
@@ -25,19 +25,23 @@
     with ResponseFieldsFiltering
     with Logging {
 
-  private var maybeTask: Option[Task] = None
+  @volatile private var maybeTask: Option[Task] = None
 
   def setTask(task: Task): Unit = {
     maybeTask = Some(task)
   }
 
   override def sendResponse(response: RestResponse): Unit = {
+    unregisterTask()
+    underlying.sendResponse(filterRestResponse(response))
+  }
+
+  private def unregisterTask(): Unit = {
     maybeTask.foreach { task =>
       TransportServiceInterceptor.taskManagerSupplier.get() match {
         case Some(taskManager) => taskManager.unregister(task)
         case None => logger.error(s"Cannot unregister task: ${task.getId}; ${task.getDescription}")
       }
     }
-    underlying.sendResponse(filterRestResponse(response))
   }
 }





